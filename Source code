import React, { useState, useMemo, useEffect } from 'react';
import { movies, userRatings, users } from './data/movies';
import { RecommendationEngine } from './utils/recommendationEngine';
import { UserSelector } from './components/UserSelector';
import { RecommendationSection } from './components/RecommendationSection';
import { MovieModal } from './components/MovieModal';
import { SearchBar } from './components/SearchBar';
import { FilterPanel } from './components/FilterPanel';
import { WatchlistPanel } from './components/WatchlistPanel';
import { Movie } from './types/movie';
import { Film, Zap, Search, Filter, Heart, Play, TrendingUp, Star, Users } from 'lucide-react';

function App() {
  const [selectedUserId, setSelectedUserId] = useState<number>(1);
  const [selectedMovie, setSelectedMovie] = useState<Movie | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedGenres, setSelectedGenres] = useState<string[]>([]);
  const [watchlist, setWatchlist] = useState<number[]>([]);
  const [showFilters, setShowFilters] = useState(false);
  const [showWatchlist, setShowWatchlist] = useState(false);
  const [currentView, setCurrentView] = useState<'recommendations' | 'trending' | 'all'>('recommendations');

  const recommendationEngine = useMemo(
    () => new RecommendationEngine(movies, userRatings, users),
    []
  );

  const recommendations = useMemo(() => {
    const userBased = recommendationEngine.getUserBasedRecommendations(selectedUserId, 6);
    const contentBased = recommendationEngine.getContentBasedRecommendations(selectedUserId, 6);
    const hybrid = recommendationEngine.getHybridRecommendations(selectedUserId, 12);
    
    return { userBased, contentBased, hybrid };
  }, [selectedUserId, recommendationEngine]);

  const filteredMovies = useMemo(() => {
    let filtered = movies;
    
    if (searchQuery) {
      filtered = filtered.filter(movie =>
        movie.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        movie.genre.some(g => g.toLowerCase().includes(searchQuery.toLowerCase())) ||
        movie.director.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }
    
    if (selectedGenres.length > 0) {
      filtered = filtered.filter(movie =>
        movie.genre.some(g => selectedGenres.includes(g))
      );
    }
    
    return filtered;
  }, [searchQuery, selectedGenres]);

  const trendingMovies = useMemo(() => {
    return movies
      .sort((a, b) => b.rating - a.rating)
      .slice(0, 8)
      .map(movie => ({
        movie,
        score: movie.rating,
        reason: `⭐ ${movie.rating}/10 • Trending now`
      }));
  }, []);

  const handleMovieClick = (movieId: number) => {
    const movie = movies.find(m => m.id === movieId);
    if (movie) {
      setSelectedMovie(movie);
      setIsModalOpen(true);
    }
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedMovie(null);
  };

  const toggleWatchlist = (movieId: number) => {
    setWatchlist(prev => 
      prev.includes(movieId) 
        ? prev.filter(id => id !== movieId)
        : [...prev, movieId]
    );
  };

  const selectedUser = users.find(u => u.id === selectedUserId);
  const allGenres = [...new Set(movies.flatMap(m => m.genre))];

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900">
      {/* Animated Background */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-pink-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-yellow-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse animation-delay-2000"></div>
        <div className="absolute top-40 left-40 w-80 h-80 bg-green-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse animation-delay-4000"></div>
      </div>

      {/* Header */}
      <header className="relative bg-gradient-to-r from-red-600 via-pink-600 to-purple-600 shadow-2xl">
        <div className="container mx-auto px-4 py-6">
          <div className="flex items-center justify-between flex-wrap gap-4">
            <div className="flex items-center">
              <div className="relative">
                <Film className="w-10 h-10 text-white mr-3 animate-bounce" />
                <div className="absolute -top-1 -right-1 w-4 h-4 bg-yellow-400 rounded-full animate-ping"></div>
              </div>
              <div>
                <h1 className="text-white text-4xl font-bold bg-gradient-to-r from-white to-yellow-200 bg-clip-text text-transparent">
                  CineRecommend
                </h1>
                <p className="text-pink-200 text-sm">AI-Powered Movie Discovery</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setShowWatchlist(!showWatchlist)}
                className="flex items-center bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-full transition-all duration-300 transform hover:scale-105"
              >
                <Heart className="w-5 h-5 mr-2" />
                <span>Watchlist ({watchlist.length})</span>
              </button>
              
              <div className="flex items-center text-white bg-white bg-opacity-20 px-4 py-2 rounded-full">
                <Zap className="w-5 h-5 mr-2 text-yellow-400" />
                <span className="text-lg font-medium">Smart AI</span>
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="relative container mx-auto px-4 py-8">
        {/* Search and Filter Bar */}
        <div className="bg-white bg-opacity-10 backdrop-blur-lg rounded-2xl p-6 mb-8 border border-white border-opacity-20">
          <div className="flex flex-col lg:flex-row gap-4 items-center">
            <SearchBar
              searchQuery={searchQuery}
              onSearchChange={setSearchQuery}
            />
            
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setShowFilters(!showFilters)}
                className={`flex items-center px-4 py-2 rounded-full transition-all duration-300 ${
                  showFilters 
                    ? 'bg-purple-600 text-white' 
                    : 'bg-white bg-opacity-20 text-white hover:bg-opacity-30'
                }`}
              >
                <Filter className="w-5 h-5 mr-2" />
                Filters
              </button>
              
              <div className="flex bg-white bg-opacity-20 rounded-full p-1">
                {[
                  { key: 'recommendations', icon: Star, label: 'For You' },
                  { key: 'trending', icon: TrendingUp, label: 'Trending' },
                  { key: 'all', icon: Film, label: 'All Movies' }
                ].map(({ key, icon: Icon, label }) => (
                  <button
                    key={key}
                    onClick={() => setCurrentView(key as any)}
                    className={`flex items-center px-4 py-2 rounded-full transition-all duration-300 ${
                      currentView === key
                        ? 'bg-white text-purple-900 shadow-lg'
                        : 'text-white hover:bg-white hover:bg-opacity-20'
                    }`}
                  >
                    <Icon className="w-4 h-4 mr-2" />
                    {label}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* Filter Panel */}
        {showFilters && (
          <FilterPanel
            genres={allGenres}
            selectedGenres={selectedGenres}
            onGenreToggle={(genre) => {
              setSelectedGenres(prev =>
                prev.includes(genre)
                  ? prev.filter(g => g !== genre)
                  : [...prev, genre]
              );
            }}
            onClearFilters={() => setSelectedGenres([])}
          />
        )}

        {/* Watchlist Panel */}
        {showWatchlist && (
          <WatchlistPanel
            watchlist={watchlist}
            movies={movies}
            onMovieClick={handleMovieClick}
            onRemoveFromWatchlist={toggleWatchlist}
            onClose={() => setShowWatchlist(false)}
          />
        )}

        {/* User Selection */}
        <UserSelector
          users={users}
          selectedUserId={selectedUserId}
          onUserSelect={setSelectedUserId}
        />

        {/* Welcome Message */}
        <div className="bg-gradient-to-r from-indigo-900 via-purple-900 to-pink-900 rounded-2xl p-8 mb-8 border border-white border-opacity-20 backdrop-blur-lg">
          <div className="flex items-center justify-between flex-wrap gap-4">
            <div>
              <h2 className="text-white text-3xl font-bold mb-2 bg-gradient-to-r from-white to-pink-200 bg-clip-text text-transparent">
                Welcome back, {selectedUser?.name}! 🎬
              </h2>
              <p className="text-gray-300 text-lg">
                Based on your love for <span className="text-pink-400 font-medium bg-pink-400 bg-opacity-20 px-2 py-1 rounded-full">
                  {selectedUser?.preferences.join(', ')}
                </span> movies, here are our personalized recommendations:
              </p>
            </div>
            
            <div className="flex items-center space-x-4">
              <div className="bg-white bg-opacity-20 rounded-full px-4 py-2">
                <div className="flex items-center text-white">
                  <Users className="w-5 h-5 mr-2 text-blue-400" />
                  <span className="text-sm">Active Users: {users.length}</span>
                </div>
              </div>
              <div className="bg-white bg-opacity-20 rounded-full px-4 py-2">
                <div className="flex items-center text-white">
                  <Film className="w-5 h-5 mr-2 text-green-400" />
                  <span className="text-sm">Movies: {movies.length}</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Content Based on Current View */}
        {currentView === 'recommendations' && (
          <>
            <RecommendationSection
              title="🎯 Recommended For You"
              subtitle="Personalized picks based on your taste"
              recommendations={recommendations.hybrid}
              onMovieClick={handleMovieClick}
              watchlist={watchlist}
              onToggleWatchlist={toggleWatchlist}
            />

            <RecommendationSection
              title="👥 Users Like You Also Enjoyed"
              subtitle="Collaborative filtering recommendations"
              recommendations={recommendations.userBased}
              onMovieClick={handleMovieClick}
              watchlist={watchlist}
              onToggleWatchlist={toggleWatchlist}
            />

            <RecommendationSection
              title="🎭 More Movies You Might Like"
              subtitle="Content-based recommendations"
              recommendations={recommendations.contentBased}
              onMovieClick={handleMovieClick}
              watchlist={watchlist}
              onToggleWatchlist={toggleWatchlist}
            />
          </>
        )}

        {currentView === 'trending' && (
          <RecommendationSection
            title="🔥 Trending Now"
            subtitle="Most popular movies right now"
            recommendations={trendingMovies}
            onMovieClick={handleMovieClick}
            watchlist={watchlist}
            onToggleWatchlist={toggleWatchlist}
          />
        )}

        {currentView === 'all' && (
          <RecommendationSection
            title="🎬 All Movies"
            subtitle={`Showing ${filteredMovies.length} movies`}
            recommendations={filteredMovies.map(movie => ({
              movie,
              score: movie.rating,
              reason: `${movie.genre.join(', ')} • ${movie.year}`
            }))}
            onMovieClick={handleMovieClick}
            watchlist={watchlist}
            onToggleWatchlist={toggleWatchlist}
          />
        )}

        {/* Algorithm Info */}
        <div className="bg-gradient-to-r from-gray-900 via-purple-900 to-indigo-900 rounded-2xl p-8 mt-12 border border-white border-opacity-20 backdrop-blur-lg">
          <h3 className="text-white text-2xl font-bold mb-6 text-center bg-gradient-to-r from-white to-purple-200 bg-clip-text text-transparent">
            How Our AI Recommendation Engine Works
          </h3>
          <div className="grid md:grid-cols-3 gap-6">
            <div className="bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl p-6 transform hover:scale-105 transition-all duration-300">
              <div className="flex items-center mb-4">
                <Users className="w-8 h-8 text-white mr-3" />
                <h4 className="text-white font-bold text-lg">Collaborative Filtering</h4>
              </div>
              <p className="text-blue-100 text-sm leading-relaxed">
                We analyze ratings from users with similar tastes to yours and recommend movies they loved.
                This helps discover hidden gems you might have missed.
              </p>
            </div>
            
            <div className="bg-gradient-to-br from-green-600 to-teal-600 rounded-xl p-6 transform hover:scale-105 transition-all duration-300">
              <div className="flex items-center mb-4">
                <Film className="w-8 h-8 text-white mr-3" />
                <h4 className="text-white font-bold text-lg">Content-Based Filtering</h4>
              </div>
              <p className="text-green-100 text-sm leading-relaxed">
                We examine the genres, directors, and themes of movies you've enjoyed to find similar content
                that matches your preferences perfectly.
              </p>
            </div>
            
            <div className="bg-gradient-to-br from-pink-600 to-red-600 rounded-xl p-6 transform hover:scale-105 transition-all duration-300">
              <div className="flex items-center mb-4">
                <Zap className="w-8 h-8 text-white mr-3" />
                <h4 className="text-white font-bold text-lg">Hybrid Intelligence</h4>
              </div>
              <p className="text-pink-100 text-sm leading-relaxed">
                Our advanced AI combines multiple recommendation techniques to provide the most accurate
                and diverse movie suggestions tailored just for you.
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Movie Modal */}
      <MovieModal
        movie={selectedMovie}
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        watchlist={watchlist}
        onToggleWatchlist={toggleWatchlist}
      />
    </div>
  );
}

export default App;
